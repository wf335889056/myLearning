http 
  无连接无状态 
  请求方式 GET, POST, PUT, DELETE, HEAD, OPTIONS
  GET与POST的区别
  GET请求返回上一页无法再次请求, POST则需要再次请求
  GET参数是暴露在URL上拼接的, POST则通过request body的方式传输
  GET只能通过URL编码, POST支持多种编码格式
  GET参数受到长度限制, POST则不受限制
  状态码
  200 请求成功
  301 永久重定向
  302 临时重定向
  304 not modified http缓存 上一次请求资源还未失效
  400 客户端请求代码出错
  401 未经授权
  403 forbidden 访问被限制, 无法范文
  404 请求资源不存在
  500 服务器错误
  501 服务器临时过载或宕机, 需要等待一段时间

options
OPTIONS请求即预检请求，可用于检测服务器允许的http方法。当发起跨域请求时，
由于安全原因，触发一定条件时浏览器会在正式请求之前自动先发起OPTIONS请求，
即CORS预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。


http1和http2的区别
  H2是一个二进制协议,H1是超文本协议.传输的内容都不是一样的。
  H2遵循多路复用即,代替同一host下的内容,只建立一次连接. H1不是。
  H2可以使用HPACK进行头部的压缩,H1则不论什么请求都会发送。
  H2允许服务器,预先将网页所需要的资源PUSH到浏览器的内存当中。

http2的新特性
  新的二进制格式
  （Binary Format），HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制  则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。
  多路复用 （MultiPlexing）
  即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在  一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。
  header压缩
  HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避 免了重复header的传输，又减小了需要传输的大小。
  服务端推送 （server push）
  同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如 YouTuBe，淘宝网等网站，可以利用chrome控制台可以查看是否启用 H2

SPDY
  降低延迟
  针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。
  请求优先级（request prioritization）
  多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。
  header压缩
  前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。
  基于HTTPS的加密协议传输
  这大大提高了传输数据的可靠性。
  服务端推送（server push）
  采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。

SPDY和https的区别
  头部压缩算法，SPDY，通用的deflate算法[注1]；HTTP2，专门为压缩头部设计的HPACK算法
  SPDY必须在TLS上运行，HTTP2可在TCP上直接使用，因为增加了HTTP1.1的Upgrade机制
  更加完善的协议商讨和确认流程
  更加完善的Server Push流程
  增加控制帧的种类，并对帧的格式考虑的更细致

http2的缺点
  TCP 以及 TCP+TLS建立连接的延时,HTTP/2使用TCP协议来传输的，而如果使用HTTPS的话，还需要使用TLS协议进行安全传输，而使用TLS也需要一个握手过程,在传输数据之前，导致我们需要花掉 3～4 个 RTT。
  TCP的队头阻塞并没有彻底解决。在HTTP/2中，多个请求是跑在一个TCP管道中的。但当HTTP/2出现丢包时，整个 TCP 都要开始等待重传，那么就会阻塞该TCP连接中的所有请求。

HTTP3
  实现了类似TCP的流量控制、传输可靠性的功能。虽然UDP不提供可靠性的传输，但QUIC在UDP的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP中存在的特性
  实现了快速握手功能。由于QUIC是基于UDP的，所以QUIC可以实现使用0-RTT或者1-RTT来建立连接，这意味着QUIC可以用最快的速度来发送和接收数据。
  集成了TLS加密功能。目前QUIC使用的是TLS1.3，相较于早期版本TLS1.3有更多的优点，其中最重要的一点是减少了握手所花费的RTT个数。
  多路复用，彻底解决TCP中队头阻塞的问题