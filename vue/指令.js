/*
 * 常用指令
 *
 * v-text 更新文本内容
 * 
 * v-html 更新html块内容
 * 
 * v-if/v-else 条件渲染
 * 
 * v-show/v-hide 样式显示/隐藏 
 * 
 * 如果是单纯的展示可以用v-show来代替v-if, 减少不必要性能消耗
 * 
 * v-for 数据源多次渲染 可以遍历数组和对象, 可以对每一项设置key值, 减少diff计算消耗
 * 
 * key 的特殊属性主要用在 Vue 的虚拟 DOM 算法，在新旧 nodes 对比时辨识 VNodes。
 * 如果不使用 key，Vue 会使用一种最大限度减少动态元素并且尽可能的尝试就地修改/复用相同类型元素的算法。
 * 而使用 key 时，它会基于 key 的变化重新排列元素顺序，并且会移除 key 不存在的元素。
 *
 * v-on 缩写@ 绑定事件监听器
 * 
 * v-bind 缩写: 动态地绑定一个或多个特性，或一个组件 prop 到表达式。
 * 
 * v-model 在表单控件或者组件上创建双向绑定
 * 
 * v-once 只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能。
 * 
 */ 

/*
 * 自定义指令
 * Vue.directive()
 * bind：只调用一次，指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
 * inserted：被绑定元素插入父节点时调用 (仅保证父节点存在，但不一定已被插入文档中)。
 * update：所在组件的 VNode 更新时调用，但是可能发生在其子 VNode 更新之前。
 * 指令的值可能发生了改变，也可能没有。但是你可以通过比较更新前后的值来忽略不必要的模板更新 (详细的钩子函数参数见下)。
 * componentUpdated：指令所在组件的 VNode 及其子 VNode 全部更新后调用。
 * unbind：只调用一次，指令与元素解绑时调用。
 * 
 */
Vue.directive('focus', {
  // 当被绑定的元素插入到 DOM 中时……
  inserted: function (el) {
    // 聚焦元素
    el.focus()
  }
})